// Code generated by goyacc -o pkg/traceql/expr.y.go pkg/traceql/expr.y. DO NOT EDIT.

//line pkg/traceql/expr.y:2
package traceql

import __yyfmt__ "fmt"

//line pkg/traceql/expr.y:2

import (
	"time"
)

//line pkg/traceql/expr.y:11
type yySymType struct {
	yys               int
	root              RootExpr
	groupOperation    GroupOperation
	coalesceOperation CoalesceOperation
	selectOperation   SelectOperation
	selectArgs        []FieldExpression
	attributeArgs     []Attribute

	spansetExpression         SpansetExpression
	spansetPipelineExpression SpansetExpression
	wrappedSpansetPipeline    Pipeline
	spansetPipeline           Pipeline
	spansetFilter             *SpansetFilter
	scalarFilter              ScalarFilter
	scalarFilterOperation     Operator

	scalarPipelineExpressionFilter ScalarFilter
	scalarPipelineExpression       ScalarExpression
	scalarExpression               ScalarExpression
	wrappedScalarPipeline          Pipeline
	scalarPipeline                 Pipeline
	aggregate                      Aggregate
	metricsAggregation             *MetricsAggregate

	fieldExpression FieldExpression
	static          Static
	intrinsicField  Attribute
	attributeField  Attribute

	binOp          Operator
	staticInt      int
	staticStr      string
	staticFloat    float64
	staticDuration time.Duration
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const DURATION = 57350
const DOT = 57351
const OPEN_BRACE = 57352
const CLOSE_BRACE = 57353
const OPEN_PARENS = 57354
const CLOSE_PARENS = 57355
const COMMA = 57356
const NIL = 57357
const TRUE = 57358
const FALSE = 57359
const STATUS_ERROR = 57360
const STATUS_OK = 57361
const STATUS_UNSET = 57362
const KIND_UNSPECIFIED = 57363
const KIND_INTERNAL = 57364
const KIND_SERVER = 57365
const KIND_CLIENT = 57366
const KIND_PRODUCER = 57367
const KIND_CONSUMER = 57368
const IDURATION = 57369
const CHILDCOUNT = 57370
const NAME = 57371
const STATUS = 57372
const STATUS_MESSAGE = 57373
const PARENT = 57374
const KIND = 57375
const ROOTNAME = 57376
const ROOTSERVICENAME = 57377
const TRACEDURATION = 57378
const PARENT_DOT = 57379
const RESOURCE_DOT = 57380
const SPAN_DOT = 57381
const COUNT = 57382
const AVG = 57383
const MAX = 57384
const MIN = 57385
const SUM = 57386
const BY = 57387
const COALESCE = 57388
const SELECT = 57389
const END_ATTRIBUTE = 57390
const RATE = 57391
const COUNT_OVER_TIME = 57392
const PIPE = 57393
const AND = 57394
const OR = 57395
const EQ = 57396
const NEQ = 57397
const LT = 57398
const LTE = 57399
const GT = 57400
const GTE = 57401
const NRE = 57402
const RE = 57403
const DESC = 57404
const ANCE = 57405
const SIBL = 57406
const NOT_CHILD = 57407
const NOT_PARENT = 57408
const NOT_DESC = 57409
const NOT_ANCE = 57410
const ADD = 57411
const SUB = 57412
const NOT = 57413
const MUL = 57414
const DIV = 57415
const MOD = 57416
const POW = 57417

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"DURATION",
	"DOT",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_PARENS",
	"CLOSE_PARENS",
	"COMMA",
	"NIL",
	"TRUE",
	"FALSE",
	"STATUS_ERROR",
	"STATUS_OK",
	"STATUS_UNSET",
	"KIND_UNSPECIFIED",
	"KIND_INTERNAL",
	"KIND_SERVER",
	"KIND_CLIENT",
	"KIND_PRODUCER",
	"KIND_CONSUMER",
	"IDURATION",
	"CHILDCOUNT",
	"NAME",
	"STATUS",
	"STATUS_MESSAGE",
	"PARENT",
	"KIND",
	"ROOTNAME",
	"ROOTSERVICENAME",
	"TRACEDURATION",
	"PARENT_DOT",
	"RESOURCE_DOT",
	"SPAN_DOT",
	"COUNT",
	"AVG",
	"MAX",
	"MIN",
	"SUM",
	"BY",
	"COALESCE",
	"SELECT",
	"END_ATTRIBUTE",
	"RATE",
	"COUNT_OVER_TIME",
	"PIPE",
	"AND",
	"OR",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"NRE",
	"RE",
	"DESC",
	"ANCE",
	"SIBL",
	"NOT_CHILD",
	"NOT_PARENT",
	"NOT_DESC",
	"NOT_ANCE",
	"ADD",
	"SUB",
	"NOT",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 228,
	13, 75,
	-2, 83,
}

const yyPrivate = 57344

const yyLast = 810

var yyAct = [...]int{

	5, 88, 87, 6, 8, 7, 82, 226, 2, 18,
	55, 193, 194, 195, 204, 260, 204, 54, 205, 206,
	196, 197, 198, 199, 200, 201, 203, 202, 78, 128,
	65, 165, 129, 132, 130, 191, 192, 28, 193, 194,
	195, 204, 150, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 205, 206, 196, 197, 198, 199,
	200, 201, 203, 202, 259, 75, 76, 77, 78, 86,
	267, 191, 192, 268, 193, 194, 195, 204, 169, 62,
	63, 64, 65, 13, 164, 167, 187, 189, 266, 164,
	207, 208, 209, 58, 191, 192, 254, 193, 194, 195,
	204, 253, 252, 205, 206, 196, 197, 198, 199, 200,
	201, 203, 202, 73, 74, 251, 75, 76, 77, 78,
	191, 192, 264, 193, 194, 195, 204, 165, 263, 171,
	217, 218, 219, 220, 73, 74, 223, 75, 76, 77,
	78, 60, 61, 262, 62, 63, 64, 65, 213, 273,
	274, 261, 223, 232, 233, 216, 179, 181, 182, 183,
	184, 185, 186, 17, 168, 151, 128, 269, 225, 129,
	132, 130, 222, 60, 61, 228, 62, 63, 64, 65,
	230, 221, 214, 215, 172, 138, 19, 20, 21, 126,
	17, 125, 135, 124, 123, 122, 80, 79, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 119, 120, 121, 72, 256, 224,
	23, 26, 24, 25, 27, 14, 136, 15, 55, 59,
	55, 255, 212, 211, 210, 57, 16, 230, 4, 258,
	265, 196, 197, 198, 199, 200, 201, 203, 202, 127,
	22, 12, 10, 270, 188, 131, 191, 192, 1, 193,
	194, 195, 204, 0, 224, 128, 0, 0, 129, 132,
	130, 272, 271, 0, 0, 0, 276, 275, 205, 206,
	196, 197, 198, 199, 200, 201, 203, 202, 66, 67,
	68, 69, 70, 71, 0, 191, 192, 0, 193, 194,
	195, 204, 0, 73, 74, 0, 75, 76, 77, 78,
	166, 58, 0, 58, 89, 90, 91, 95, 115, 0,
	81, 83, 0, 0, 94, 92, 93, 97, 96, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 111, 110, 112, 113, 114, 118, 116, 117, 41,
	46, 0, 0, 43, 0, 42, 0, 50, 0, 44,
	45, 47, 48, 49, 52, 51, 0, 257, 0, 0,
	0, 89, 90, 91, 95, 115, 0, 0, 83, 84,
	85, 94, 92, 93, 97, 96, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 111, 110,
	112, 113, 114, 118, 116, 117, 205, 206, 196, 197,
	198, 199, 200, 201, 203, 202, 250, 0, 0, 0,
	0, 0, 0, 191, 192, 0, 193, 194, 195, 204,
	66, 67, 68, 69, 70, 71, 84, 85, 0, 0,
	231, 0, 0, 0, 0, 60, 61, 0, 62, 63,
	64, 65, 0, 0, 0, 205, 206, 196, 197, 198,
	199, 200, 201, 203, 202, 190, 0, 0, 0, 0,
	0, 0, 191, 192, 0, 193, 194, 195, 204, 205,
	206, 196, 197, 198, 199, 200, 201, 203, 202, 169,
	0, 0, 0, 0, 0, 0, 191, 192, 0, 193,
	194, 195, 204, 0, 0, 0, 205, 206, 196, 197,
	198, 199, 200, 201, 203, 202, 0, 0, 0, 0,
	0, 0, 0, 191, 192, 0, 193, 194, 195, 204,
	66, 67, 68, 69, 70, 71, 19, 20, 21, 0,
	17, 0, 135, 0, 0, 73, 74, 0, 75, 76,
	77, 78, 19, 20, 21, 0, 17, 0, 229, 0,
	19, 20, 21, 0, 17, 0, 227, 0, 0, 0,
	23, 26, 24, 25, 27, 14, 136, 15, 0, 133,
	134, 0, 0, 0, 0, 0, 23, 26, 24, 25,
	27, 14, 0, 15, 23, 26, 24, 25, 27, 14,
	22, 15, 19, 20, 21, 0, 17, 0, 9, 0,
	0, 19, 20, 21, 0, 17, 22, 135, 0, 0,
	0, 19, 20, 21, 22, 0, 0, 180, 0, 163,
	0, 0, 0, 0, 0, 0, 23, 26, 24, 25,
	27, 14, 0, 15, 0, 23, 26, 24, 25, 27,
	0, 0, 0, 0, 0, 23, 26, 24, 25, 27,
	0, 0, 0, 0, 0, 0, 22, 0, 29, 34,
	0, 0, 31, 0, 30, 22, 40, 0, 32, 33,
	35, 36, 37, 38, 39, 22, 41, 46, 56, 11,
	43, 0, 42, 0, 50, 0, 44, 45, 47, 48,
	49, 52, 51, 29, 34, 0, 0, 31, 0, 30,
	0, 40, 0, 32, 33, 35, 36, 37, 38, 39,
	43, 0, 42, 0, 50, 0, 44, 45, 47, 48,
	49, 52, 51, 31, 0, 30, 0, 40, 115, 32,
	33, 35, 36, 37, 38, 39, 53, 3, 170, 173,
	174, 175, 176, 177, 178, 0, 105, 106, 107, 108,
	109, 111, 110, 112, 113, 114, 118, 116, 117, 0,
	0, 0, 0, 0, 0, 0, 137, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 89, 90,
	91, 95, 0, 0, 0, 172, 0, 0, 94, 92,
	93, 97, 96, 98, 99, 100, 101, 102, 103, 104,
}
var yyPact = [...]int{

	596, -1000, -14, 651, -1000, 634, -1000, -1000, -1000, 596,
	-1000, 376, -1000, 234, 185, 184, -1000, 309, -1000, -1000,
	-1000, -1000, 208, 183, 182, 181, 179, 177, 530, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 616, 76, 297, 72, 151, 476, 783,
	172, 172, 172, 172, 172, 172, -1000, -1000, -1000, -1000,
	-1000, -1000, 615, 615, 615, 615, 615, 615, 615, 366,
	366, -1000, 454, 366, 366, 366, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 230, 229, 228, 144, -1000,
	-1000, -1000, 142, 366, 366, 366, 366, -1000, 634, -1000,
	-1000, -1000, -1000, 169, 160, 605, 156, 677, 554, -1000,
	-1000, -1000, -1000, 677, -1000, -1000, -1000, -1000, -1000, -1000,
	664, 153, -1000, -1000, -1000, -1000, 664, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 180, -1000, -1000, -1000, -1000,
	104, -1000, 546, 7, 7, -45, -45, -45, -45, 44,
	615, -7, -7, -47, -47, -47, -47, 427, 140, -34,
	-1000, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 403, -61, -61,
	67, 54, 53, 48, 227, 214, -1000, 354, 226, 51,
	2, 138, 130, 297, 65, 115, 71, 554, -1000, 546,
	-20, -1000, -1000, 366, -61, -61, -59, -59, -59, 25,
	25, 25, 25, 25, 25, 25, 25, -59, 187, 187,
	-1000, -1000, -1000, -1000, -1000, 40, 22, -1000, -1000, -1000,
	-1000, -1000, 28, -1000, 180, -34, -1000, -1000, 155, 729,
	136, -1000, -1000, -1000, 729, -1000, -1000,
}
var yyPgo = [...]int{

	0, 258, 5, 255, 4, 254, 253, 0, 746, 252,
	7, 251, 3, 217, 249, 238, 688, 83, 236, 235,
	9, 6, 69, 2, 1,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 1, 14, 14, 14, 6, 6,
	6, 6, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 9, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 2, 3, 4, 5,
	5, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 11, 11, 12, 13, 13,
	13, 13, 13, 13, 15, 15, 16, 16, 16, 16,
	16, 16, 16, 16, 18, 19, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 24, 24, 24, 24, 24, 24,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 3, 3, 3, 7, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 4, 3, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 2, 3, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 4, 4,
}
var yyChk = [...]int{

	-1000, -1, -10, -8, -15, -7, -12, -2, -4, 12,
	-9, -16, -11, -17, 45, 47, -18, 10, -20, 6,
	7, 8, 70, 40, 42, 43, 41, 44, 51, 52,
	58, 56, 62, 63, 53, 64, 65, 66, 67, 68,
	60, 52, 58, 56, 62, 63, 53, 64, 65, 66,
	60, 68, 67, -8, -10, -7, -16, -19, -17, -13,
	69, 70, 72, 73, 74, 75, 54, 55, 56, 57,
	58, 59, -13, 69, 70, 72, 73, 74, 75, 12,
	12, 11, -21, 12, 70, 71, -22, -23, -24, 5,
	6, 7, 16, 17, 15, 8, 19, 18, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	33, 32, 34, 35, 36, 9, 38, 39, 37, 6,
	7, 8, 12, 12, 12, 12, 12, -14, -7, -12,
	-2, -3, -4, 49, 50, 12, 46, -8, 12, -8,
	-8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
	-7, 12, -7, -7, -7, -7, -7, -7, -7, -7,
	-7, -7, -7, 13, 13, 51, 13, 13, 13, 13,
	-16, -22, 12, -16, -16, -16, -16, -16, -16, -17,
	12, -17, -17, -17, -17, -17, -17, -21, -5, -21,
	11, 69, 70, 72, 73, 74, 54, 55, 56, 57,
	58, 59, 61, 60, 75, 52, 53, -21, -21, -21,
	4, 4, 4, 4, 38, 39, 13, -21, -21, -21,
	-21, 12, 12, -7, -17, 12, -10, 12, -20, 12,
	-10, 13, 13, 14, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	13, 48, 48, 48, 48, 4, 4, 13, 13, 13,
	13, 13, 13, 13, 51, -21, 48, 48, 45, 12,
	-6, -23, -24, 13, 14, -23, -24,
}
var yyDef = [...]int{

	0, -2, 1, 2, 3, 27, 28, 29, 30, 0,
	25, 0, 54, 0, 0, 0, 73, 0, 83, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 59, 60, 61,
	62, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 0, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 0, 0, 0, 0, 87,
	88, 89, 0, 0, 0, 0, 0, 4, 31, 32,
	33, 34, 35, 0, 0, 0, 0, 13, 0, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	42, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 12, 26, 0, 41, 66, 74, 76,
	64, 65, 0, 67, 68, 69, 70, 71, 72, 57,
	0, 77, 78, 79, 80, 81, 82, 0, 0, 39,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 36, 38, 0, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	95, 143, 144, 145, 146, 0, 0, 91, 92, 93,
	94, 5, 6, 37, 0, 40, 147, 148, 0, 0,
	0, 8, 9, 7, 0, 10, 11,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:103
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].spansetPipeline)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:104
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].spansetPipelineExpression)
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:105
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].scalarPipelineExpressionFilter)
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:106
		{
			yylex.(*lexer).expr = newRootExprWithMetrics(yyDollar[1].spansetPipeline, yyDollar[3].metricsAggregation)
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:110
		{
			yyVAL.metricsAggregation = newMetricsAggregate(metricsAggregateRate, nil)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:111
		{
			yyVAL.metricsAggregation = newMetricsAggregate(metricsAggregateCountOverTime, nil)
		}
	case 7:
		yyDollar = yyS[yypt-7 : yypt+1]
//line pkg/traceql/expr.y:112
		{
			yyVAL.metricsAggregation = newMetricsAggregate(metricsAggregateCountOverTime, yyDollar[6].attributeArgs)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:116
		{
			yyVAL.attributeArgs = []Attribute{yyDollar[1].intrinsicField}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:117
		{
			yyVAL.attributeArgs = []Attribute{yyDollar[1].attributeField}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:118
		{
			yyVAL.attributeArgs = append(yyDollar[1].attributeArgs, yyDollar[3].intrinsicField)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:119
		{
			yyVAL.attributeArgs = append(yyDollar[1].attributeArgs, yyDollar[3].attributeField)
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:126
		{
			yyVAL.spansetPipelineExpression = yyDollar[2].spansetPipelineExpression
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:127
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetAnd, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:128
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetChild, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:129
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetParent, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:130
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetDescendant, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:131
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetAncestor, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:132
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetUnion, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:133
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetSibling, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:134
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotChild, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:135
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotParent, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:136
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotDescendant, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:137
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotAncestor, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:138
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotSibling, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:139
		{
			yyVAL.spansetPipelineExpression = yyDollar[1].wrappedSpansetPipeline
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:143
		{
			yyVAL.wrappedSpansetPipeline = yyDollar[2].spansetPipeline
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:146
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].spansetExpression)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:147
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].scalarFilter)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:148
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].groupOperation)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:149
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].selectOperation)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:150
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].spansetExpression)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:151
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].scalarFilter)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:152
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].groupOperation)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:153
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].coalesceOperation)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:154
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].selectOperation)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:158
		{
			yyVAL.groupOperation = newGroupOperation(yyDollar[3].fieldExpression)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:162
		{
			yyVAL.coalesceOperation = newCoalesceOperation()
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:166
		{
			yyVAL.selectOperation = newSelectOperation(yyDollar[3].selectArgs)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:170
		{
			yyVAL.selectArgs = []FieldExpression{yyDollar[1].fieldExpression}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:171
		{
			yyVAL.selectArgs = append(yyDollar[1].selectArgs, yyDollar[3].fieldExpression)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:175
		{
			yyVAL.spansetExpression = yyDollar[2].spansetExpression
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:176
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetAnd, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:177
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetChild, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:178
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetParent, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:179
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetDescendant, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:180
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetAncestor, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:181
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetUnion, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:182
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetSibling, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:184
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotChild, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:185
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotParent, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:186
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotSibling, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:187
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotAncestor, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:188
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotDescendant, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:190
		{
			yyVAL.spansetExpression = yyDollar[1].spansetFilter
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:194
		{
			yyVAL.spansetFilter = newSpansetFilter(NewStaticBool(true))
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:195
		{
			yyVAL.spansetFilter = newSpansetFilter(yyDollar[2].fieldExpression)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:199
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:203
		{
			yyVAL.scalarFilterOperation = OpEqual
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:204
		{
			yyVAL.scalarFilterOperation = OpNotEqual
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:205
		{
			yyVAL.scalarFilterOperation = OpLess
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:206
		{
			yyVAL.scalarFilterOperation = OpLessEqual
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:207
		{
			yyVAL.scalarFilterOperation = OpGreater
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:208
		{
			yyVAL.scalarFilterOperation = OpGreaterEqual
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:215
		{
			yyVAL.scalarPipelineExpressionFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:216
		{
			yyVAL.scalarPipelineExpressionFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpression, yyDollar[3].static)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:220
		{
			yyVAL.scalarPipelineExpression = yyDollar[2].scalarPipelineExpression
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:221
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpAdd, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:222
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpSub, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:223
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpMult, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:224
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpDiv, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:225
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpMod, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:226
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpPower, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:227
		{
			yyVAL.scalarPipelineExpression = yyDollar[1].wrappedScalarPipeline
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:231
		{
			yyVAL.wrappedScalarPipeline = yyDollar[2].scalarPipeline
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:235
		{
			yyVAL.scalarPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].aggregate)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:239
		{
			yyVAL.scalarExpression = yyDollar[2].scalarExpression
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:240
		{
			yyVAL.scalarExpression = newScalarOperation(OpAdd, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:241
		{
			yyVAL.scalarExpression = newScalarOperation(OpSub, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:242
		{
			yyVAL.scalarExpression = newScalarOperation(OpMult, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:243
		{
			yyVAL.scalarExpression = newScalarOperation(OpDiv, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:244
		{
			yyVAL.scalarExpression = newScalarOperation(OpMod, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:245
		{
			yyVAL.scalarExpression = newScalarOperation(OpPower, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:246
		{
			yyVAL.scalarExpression = yyDollar[1].aggregate
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:247
		{
			yyVAL.scalarExpression = NewStaticInt(yyDollar[1].staticInt)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:248
		{
			yyVAL.scalarExpression = NewStaticFloat(yyDollar[1].staticFloat)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:249
		{
			yyVAL.scalarExpression = NewStaticDuration(yyDollar[1].staticDuration)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:250
		{
			yyVAL.scalarExpression = NewStaticInt(-yyDollar[2].staticInt)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:251
		{
			yyVAL.scalarExpression = NewStaticFloat(-yyDollar[2].staticFloat)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:252
		{
			yyVAL.scalarExpression = NewStaticDuration(-yyDollar[2].staticDuration)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:256
		{
			yyVAL.aggregate = newAggregate(aggregateCount, nil)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:257
		{
			yyVAL.aggregate = newAggregate(aggregateMax, yyDollar[3].fieldExpression)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:258
		{
			yyVAL.aggregate = newAggregate(aggregateMin, yyDollar[3].fieldExpression)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:259
		{
			yyVAL.aggregate = newAggregate(aggregateAvg, yyDollar[3].fieldExpression)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:260
		{
			yyVAL.aggregate = newAggregate(aggregateSum, yyDollar[3].fieldExpression)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:267
		{
			yyVAL.fieldExpression = yyDollar[2].fieldExpression
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:268
		{
			yyVAL.fieldExpression = newBinaryOperation(OpAdd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:269
		{
			yyVAL.fieldExpression = newBinaryOperation(OpSub, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:270
		{
			yyVAL.fieldExpression = newBinaryOperation(OpMult, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:271
		{
			yyVAL.fieldExpression = newBinaryOperation(OpDiv, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:272
		{
			yyVAL.fieldExpression = newBinaryOperation(OpMod, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:273
		{
			yyVAL.fieldExpression = newBinaryOperation(OpEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:274
		{
			yyVAL.fieldExpression = newBinaryOperation(OpNotEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:275
		{
			yyVAL.fieldExpression = newBinaryOperation(OpLess, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:276
		{
			yyVAL.fieldExpression = newBinaryOperation(OpLessEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:277
		{
			yyVAL.fieldExpression = newBinaryOperation(OpGreater, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:278
		{
			yyVAL.fieldExpression = newBinaryOperation(OpGreaterEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:279
		{
			yyVAL.fieldExpression = newBinaryOperation(OpRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:280
		{
			yyVAL.fieldExpression = newBinaryOperation(OpNotRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:281
		{
			yyVAL.fieldExpression = newBinaryOperation(OpPower, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:282
		{
			yyVAL.fieldExpression = newBinaryOperation(OpAnd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:283
		{
			yyVAL.fieldExpression = newBinaryOperation(OpOr, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:284
		{
			yyVAL.fieldExpression = newUnaryOperation(OpSub, yyDollar[2].fieldExpression)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:285
		{
			yyVAL.fieldExpression = newUnaryOperation(OpNot, yyDollar[2].fieldExpression)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:286
		{
			yyVAL.fieldExpression = yyDollar[1].static
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:287
		{
			yyVAL.fieldExpression = yyDollar[1].intrinsicField
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:288
		{
			yyVAL.fieldExpression = yyDollar[1].attributeField
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:295
		{
			yyVAL.static = NewStaticString(yyDollar[1].staticStr)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:296
		{
			yyVAL.static = NewStaticInt(yyDollar[1].staticInt)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:297
		{
			yyVAL.static = NewStaticFloat(yyDollar[1].staticFloat)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:298
		{
			yyVAL.static = NewStaticBool(true)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:299
		{
			yyVAL.static = NewStaticBool(false)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:300
		{
			yyVAL.static = NewStaticNil()
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:301
		{
			yyVAL.static = NewStaticDuration(yyDollar[1].staticDuration)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:302
		{
			yyVAL.static = NewStaticStatus(StatusOk)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:303
		{
			yyVAL.static = NewStaticStatus(StatusError)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:304
		{
			yyVAL.static = NewStaticStatus(StatusUnset)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:305
		{
			yyVAL.static = NewStaticKind(KindUnspecified)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:306
		{
			yyVAL.static = NewStaticKind(KindInternal)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:307
		{
			yyVAL.static = NewStaticKind(KindServer)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:308
		{
			yyVAL.static = NewStaticKind(KindClient)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:309
		{
			yyVAL.static = NewStaticKind(KindProducer)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:310
		{
			yyVAL.static = NewStaticKind(KindConsumer)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:314
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicDuration)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:315
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicChildCount)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:316
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicName)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:317
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicStatus)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:318
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicStatusMessage)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:319
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicKind)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:320
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicParent)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:321
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicTraceRootSpan)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:322
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicTraceRootService)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:323
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicTraceDuration)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:327
		{
			yyVAL.attributeField = NewAttribute(yyDollar[2].staticStr)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:328
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeResource, false, yyDollar[2].staticStr)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:329
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeSpan, false, yyDollar[2].staticStr)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:330
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeNone, true, yyDollar[2].staticStr)
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:331
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeResource, true, yyDollar[3].staticStr)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:332
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeSpan, true, yyDollar[3].staticStr)
		}
	}
	goto yystack /* stack new state and value */
}
